var SyncREST = Class.create();
SyncREST.prototype = {
	initialize: function(credentials, instanceURL) {
		this._credentials = (credentials != '') ? credentials : {user: 'admin', password: 'admin'};
		this._instanceURL = (instanceURL != '') ? instanceURL : gs.getProperty('glide.servlet.uri');
	},
	
	getEndpoint: function(tableName) {
		var endpoint = this._instanceURL + '/api/now/table/' + tableName;
		
		return endpoint;
	},
	
	getUser: function() {
		return this._credentials.user;
	},
	
	getPassword: function() {
		return this._credentials.password;
	},
	
	syncTableRecords: function(tableName, encodedQuery, sysFields) {
		try {
			var request = new sn_ws.RESTMessageV2();
			request.setEndpoint(this.getEndpoint(tableName));
			request.setHttpMethod('get');
			request.setRequestHeader('Accept', 'application/json');
			request.setHttpTimeout(10000);
			request.setBasicAuth(this.getUser(), this.getPassword());
			request.setQueryParameter('sysparm_exclude_reference_link', true); // exclude links to reference fields!
			if (encodedQuery != '' && encodedQuery !== undefined) {
				request.setQueryParameter('sysparm_query', encodedQuery)
			}
			var response = request.execute();
			var httpStatus = response.getStatusCode();
			//gs.debug('http status = ' + httpStatus, 'SyncREST');
			var recordList = JSON.parse(response.getBody()).result;
			gs.debug('Body = ' + response.getBody(), 'SyncREST');
			
			new SyncRecordUtil().syncRecordListToTable(recordList, tableName, sysFields);
		}
		catch(ex) {
			gs.log('Error: ' + ex.getMessage(), 'SyncREST');
		}
	},
	
	type: 'SyncREST'
};
